/* automatically generated by rust-bindgen */

pub const ERROR_SUCCESS: u32 = 0;
pub const ERROR_FILE_NOT_FOUND: u32 = 2;
pub const ERROR_ACCESS_DENIED: u32 = 1;
pub const ERROR_INVALID_HANDLE: u32 = 9;
pub const ERROR_NOT_ENOUGH_MEMORY: u32 = 12;
pub const ERROR_NOT_SUPPORTED: u32 = 95;
pub const ERROR_INVALID_PARAMETER: u32 = 22;
pub const ERROR_NEGATIVE_SEEK: u32 = 22;
pub const ERROR_DISK_FULL: u32 = 28;
pub const ERROR_ALREADY_EXISTS: u32 = 17;
pub const ERROR_INSUFFICIENT_BUFFER: u32 = 105;
pub const ERROR_BAD_FORMAT: u32 = 1000;
pub const ERROR_NO_MORE_FILES: u32 = 1001;
pub const ERROR_HANDLE_EOF: u32 = 1002;
pub const ERROR_CAN_NOT_COMPLETE: u32 = 1003;
pub const ERROR_FILE_CORRUPT: u32 = 1004;
pub const ERROR_AVI_FILE: u32 = 10000;
pub const ERROR_UNKNOWN_FILE_KEY: u32 = 10001;
pub const ERROR_CHECKSUM_ERROR: u32 = 10002;
pub const ERROR_INTERNAL_FILE: u32 = 10003;
pub const ERROR_BASE_FILE_MISSING: u32 = 10004;
pub const ERROR_MARKED_FOR_DELETE: u32 = 10005;
pub const ERROR_FILE_INCOMPLETE: u32 = 10006;
pub const ERROR_UNKNOWN_FILE_NAMES: u32 = 10007;
pub const ERROR_CANT_FIND_PATCH_PREFIX: u32 = 10008;
pub const SFILE_OPEN_HARD_DISK_FILE: u32 = 2;
pub const SFILE_OPEN_CDROM_FILE: u32 = 3;
pub const SFILE_OPEN_FROM_MPQ: u32 = 0;
pub const SFILE_OPEN_CHECK_EXISTS: u32 = 4294967292;
pub const SFILE_OPEN_BASE_FILE: u32 = 4294967293;
pub const SFILE_OPEN_ANY_LOCALE: u32 = 4294967294;
pub const SFILE_OPEN_LOCAL_FILE: u32 = 4294967295;
pub const MPQ_FLAG_READ_ONLY: u32 = 1;
pub const MPQ_FLAG_CHANGED: u32 = 2;
pub const MPQ_FLAG_MALFORMED: u32 = 4;
pub const MPQ_FLAG_HASH_TABLE_CUT: u32 = 8;
pub const MPQ_FLAG_BLOCK_TABLE_CUT: u32 = 16;
pub const MPQ_FLAG_CHECK_SECTOR_CRC: u32 = 32;
pub const MPQ_FLAG_SAVING_TABLES: u32 = 64;
pub const MPQ_FLAG_PATCH: u32 = 128;
pub const MPQ_FLAG_WAR3_MAP: u32 = 256;
pub const MPQ_FLAG_LISTFILE_NONE: u32 = 512;
pub const MPQ_FLAG_LISTFILE_NEW: u32 = 1024;
pub const MPQ_FLAG_LISTFILE_FORCE: u32 = 2048;
pub const MPQ_FLAG_ATTRIBUTES_NONE: u32 = 4096;
pub const MPQ_FLAG_ATTRIBUTES_NEW: u32 = 8192;
pub const MPQ_FLAG_SIGNATURE_NONE: u32 = 16384;
pub const MPQ_FLAG_SIGNATURE_NEW: u32 = 32768;
pub const MPQ_SUBTYPE_MPQ: u32 = 0;
pub const MPQ_SUBTYPE_SQP: u32 = 1;
pub const MPQ_SUBTYPE_MPK: u32 = 2;
pub const SFILE_INVALID_SIZE: u32 = 4294967295;
pub const SFILE_INVALID_POS: u32 = 4294967295;
pub const SFILE_INVALID_ATTRIBUTES: u32 = 4294967295;
pub const MPQ_FILE_IMPLODE: u32 = 256;
pub const MPQ_FILE_COMPRESS: u32 = 512;
pub const MPQ_FILE_ENCRYPTED: u32 = 65536;
pub const MPQ_FILE_FIX_KEY: u32 = 131072;
pub const MPQ_FILE_PATCH_FILE: u32 = 1048576;
pub const MPQ_FILE_SINGLE_UNIT: u32 = 16777216;
pub const MPQ_FILE_DELETE_MARKER: u32 = 33554432;
pub const MPQ_FILE_SECTOR_CRC: u32 = 67108864;
pub const MPQ_FILE_SIGNATURE: u32 = 268435456;
pub const MPQ_FILE_EXISTS: u32 = 2147483648;
pub const MPQ_FILE_REPLACEEXISTING: u32 = 2147483648;
pub const MPQ_FILE_COMPRESS_MASK: u32 = 65280;
pub const MPQ_FILE_DEFAULT_INTERNAL: u32 = 4294967295;
pub const MPQ_FILE_VALID_FLAGS: u32 = 2534605568;
pub const MPQ_FILE_VALID_FLAGS_W3X: u32 = 2516779776;
pub const MPQ_COMPRESSION_HUFFMANN: u32 = 1;
pub const MPQ_COMPRESSION_ZLIB: u32 = 2;
pub const MPQ_COMPRESSION_PKWARE: u32 = 8;
pub const MPQ_COMPRESSION_BZIP2: u32 = 16;
pub const MPQ_COMPRESSION_SPARSE: u32 = 32;
pub const MPQ_COMPRESSION_ADPCM_MONO: u32 = 64;
pub const MPQ_COMPRESSION_ADPCM_STEREO: u32 = 128;
pub const MPQ_COMPRESSION_LZMA: u32 = 18;
pub const MPQ_COMPRESSION_NEXT_SAME: u32 = 4294967295;
pub const MPQ_WAVE_QUALITY_HIGH: u32 = 0;
pub const MPQ_WAVE_QUALITY_MEDIUM: u32 = 1;
pub const MPQ_WAVE_QUALITY_LOW: u32 = 2;
pub const MPQ_KEY_HASH_TABLE: u32 = 3283040112;
pub const MPQ_KEY_BLOCK_TABLE: u32 = 3968054179;
pub const MPQ_FORMAT_VERSION_1: u32 = 0;
pub const MPQ_FORMAT_VERSION_2: u32 = 1;
pub const MPQ_FORMAT_VERSION_3: u32 = 2;
pub const MPQ_FORMAT_VERSION_4: u32 = 3;
pub const MPQ_ATTRIBUTE_CRC32: u32 = 1;
pub const MPQ_ATTRIBUTE_FILETIME: u32 = 2;
pub const MPQ_ATTRIBUTE_MD5: u32 = 4;
pub const MPQ_ATTRIBUTE_PATCH_BIT: u32 = 8;
pub const MPQ_ATTRIBUTE_ALL: u32 = 15;
pub const MPQ_ATTRIBUTES_V1: u32 = 100;
pub const MPQ_OPEN_NO_LISTFILE: u32 = 65536;
pub const MPQ_OPEN_NO_ATTRIBUTES: u32 = 131072;
pub const MPQ_OPEN_NO_HEADER_SEARCH: u32 = 262144;
pub const MPQ_OPEN_FORCE_MPQ_V1: u32 = 524288;
pub const MPQ_OPEN_CHECK_SECTOR_CRC: u32 = 1048576;
pub const MPQ_OPEN_PATCH: u32 = 2097152;
pub const MPQ_OPEN_FORCE_LISTFILE: u32 = 4194304;
pub const MPQ_OPEN_READ_ONLY: u32 = 256;
pub const MPQ_CREATE_LISTFILE: u32 = 1048576;
pub const MPQ_CREATE_ATTRIBUTES: u32 = 2097152;
pub const MPQ_CREATE_SIGNATURE: u32 = 4194304;
pub const MPQ_CREATE_ARCHIVE_V1: u32 = 0;
pub const MPQ_CREATE_ARCHIVE_V2: u32 = 16777216;
pub const MPQ_CREATE_ARCHIVE_V3: u32 = 33554432;
pub const MPQ_CREATE_ARCHIVE_V4: u32 = 50331648;
pub const MPQ_CREATE_ARCHIVE_VMASK: u32 = 251658240;
pub const SFILE_VERIFY_SECTOR_CRC: u32 = 1;
pub const SFILE_VERIFY_FILE_CRC: u32 = 2;
pub const SFILE_VERIFY_FILE_MD5: u32 = 4;
pub const SFILE_VERIFY_RAW_MD5: u32 = 8;
pub const SFILE_VERIFY_ALL: u32 = 15;
pub const SFILE_VERIFY_MPQ_HEADER: u32 = 1;
pub const SFILE_VERIFY_HET_TABLE: u32 = 2;
pub const SFILE_VERIFY_BET_TABLE: u32 = 3;
pub const SFILE_VERIFY_HASH_TABLE: u32 = 4;
pub const SFILE_VERIFY_BLOCK_TABLE: u32 = 5;
pub const SFILE_VERIFY_HIBLOCK_TABLE: u32 = 6;
pub const SFILE_VERIFY_FILE: u32 = 7;
pub const ERROR_NO_SIGNATURE: u32 = 0;
pub const ERROR_VERIFY_FAILED: u32 = 1;
pub const ERROR_WEAK_SIGNATURE_OK: u32 = 2;
pub const ERROR_WEAK_SIGNATURE_ERROR: u32 = 3;
pub const ERROR_STRONG_SIGNATURE_OK: u32 = 4;
pub const ERROR_STRONG_SIGNATURE_ERROR: u32 = 5;
pub const MPQ_HEADER_SIZE_V1: u32 = 32;
pub const MPQ_HEADER_SIZE_V2: u32 = 44;
pub const MPQ_HEADER_SIZE_V3: u32 = 68;
pub const MPQ_HEADER_SIZE_V4: u32 = 208;
pub const MPQ_HEADER_DWORDS: u32 = 52;
pub type BYTE = ::std::os::raw::c_uchar;
pub type USHORT = ::std::os::raw::c_ushort;
pub type LONG = ::std::os::raw::c_int;
pub type DWORD = ::std::os::raw::c_uint;
pub type ULONGLONG = ::std::os::raw::c_ulonglong;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type LPOVERLAPPED = *mut ::std::os::raw::c_void;
pub type TCHAR = ::std::os::raw::c_char;
pub type LCID = ::std::os::raw::c_uint;
pub type LPDWORD = *mut DWORD;
pub type LPBYTE = *mut BYTE;
pub type HASH_STRING = ::std::option::Option<
    unsafe extern "C" fn(szFileName: *const ::std::os::raw::c_char, dwHashType: DWORD) -> DWORD,
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _SFileInfoClass {
    SFileMpqFileName     = 0,
    SFileMpqStreamBitmap = 1,
    SFileMpqUserDataOffset = 2,
    SFileMpqUserDataHeader = 3,
    SFileMpqUserData     = 4,
    SFileMpqHeaderOffset = 5,
    SFileMpqHeaderSize   = 6,
    SFileMpqHeader       = 7,
    SFileMpqHetTableOffset = 8,
    SFileMpqHetTableSize = 9,
    SFileMpqHetHeader    = 10,
    SFileMpqHetTable     = 11,
    SFileMpqBetTableOffset = 12,
    SFileMpqBetTableSize = 13,
    SFileMpqBetHeader    = 14,
    SFileMpqBetTable     = 15,
    SFileMpqHashTableOffset = 16,
    SFileMpqHashTableSize64 = 17,
    SFileMpqHashTableSize = 18,
    SFileMpqHashTable    = 19,
    SFileMpqBlockTableOffset = 20,
    SFileMpqBlockTableSize64 = 21,
    SFileMpqBlockTableSize = 22,
    SFileMpqBlockTable   = 23,
    SFileMpqHiBlockTableOffset = 24,
    SFileMpqHiBlockTableSize64 = 25,
    SFileMpqHiBlockTable = 26,
    SFileMpqSignatures   = 27,
    SFileMpqStrongSignatureOffset = 28,
    SFileMpqStrongSignatureSize = 29,
    SFileMpqStrongSignature = 30,
    SFileMpqArchiveSize64 = 31,
    SFileMpqArchiveSize  = 32,
    SFileMpqMaxFileCount = 33,
    SFileMpqFileTableSize = 34,
    SFileMpqSectorSize   = 35,
    SFileMpqNumberOfFiles = 36,
    SFileMpqRawChunkSize = 37,
    SFileMpqStreamFlags  = 38,
    SFileMpqFlags        = 39,
    SFileInfoPatchChain  = 40,
    SFileInfoFileEntry   = 41,
    SFileInfoHashEntry   = 42,
    SFileInfoHashIndex   = 43,
    SFileInfoNameHash1   = 44,
    SFileInfoNameHash2   = 45,
    SFileInfoNameHash3   = 46,
    SFileInfoLocale      = 47,
    SFileInfoFileIndex   = 48,
    SFileInfoByteOffset  = 49,
    SFileInfoFileTime    = 50,
    SFileInfoFileSize    = 51,
    SFileInfoCompressedSize = 52,
    SFileInfoFlags       = 53,
    SFileInfoEncryptionKey = 54,
    SFileInfoEncryptionKeyRaw = 55,
    SFileInfoCRC32       = 56,
}
pub use self::_SFileInfoClass as SFileInfoClass;
pub type SFILE_DOWNLOAD_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvUserData: *mut ::std::os::raw::c_void,
        ByteOffset: ULONGLONG,
        dwTotalBytes: DWORD,
    ),
>;
pub type SFILE_ADDFILE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvUserData: *mut ::std::os::raw::c_void,
        dwBytesWritten: DWORD,
        dwTotalBytes: DWORD,
        bFinalCall: bool,
    ),
>;
pub type SFILE_COMPACT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvUserData: *mut ::std::os::raw::c_void,
        dwWorkType: DWORD,
        BytesProcessed: ULONGLONG,
        TotalBytes: ULONGLONG,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TFileStream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TBitArray {
    pub NumberOfBytes: DWORD,
    pub NumberOfBits:  DWORD,
    pub Elements:      [BYTE; 1usize],
}
#[test]
fn bindgen_test_layout__TBitArray() {
    assert_eq!(
        ::std::mem::size_of::<_TBitArray>(),
        12usize,
        concat!("Size of: ", stringify!(_TBitArray))
    );
    assert_eq!(
        ::std::mem::align_of::<_TBitArray>(),
        4usize,
        concat!("Alignment of ", stringify!(_TBitArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TBitArray>())).NumberOfBytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TBitArray),
            "::",
            stringify!(NumberOfBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TBitArray>())).NumberOfBits as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TBitArray),
            "::",
            stringify!(NumberOfBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TBitArray>())).Elements as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TBitArray),
            "::",
            stringify!(Elements)
        )
    );
}
pub type TBitArray = _TBitArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQUserData {
    pub dwID:             DWORD,
    pub cbUserDataSize:   DWORD,
    pub dwHeaderOffs:     DWORD,
    pub cbUserDataHeader: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQUserData() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQUserData>(),
        16usize,
        concat!("Size of: ", stringify!(_TMPQUserData))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQUserData>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQUserData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQUserData>())).dwID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQUserData),
            "::",
            stringify!(dwID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQUserData>())).cbUserDataSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQUserData),
            "::",
            stringify!(cbUserDataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQUserData>())).dwHeaderOffs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQUserData),
            "::",
            stringify!(dwHeaderOffs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQUserData>())).cbUserDataHeader as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQUserData),
            "::",
            stringify!(cbUserDataHeader)
        )
    );
}
pub type TMPQUserData = _TMPQUserData;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQHeader {
    pub dwID:               DWORD,
    pub dwHeaderSize:       DWORD,
    pub dwArchiveSize:      DWORD,
    pub wFormatVersion:     USHORT,
    pub wSectorSize:        USHORT,
    pub dwHashTablePos:     DWORD,
    pub dwBlockTablePos:    DWORD,
    pub dwHashTableSize:    DWORD,
    pub dwBlockTableSize:   DWORD,
    pub HiBlockTablePos64:  ULONGLONG,
    pub wHashTablePosHi:    USHORT,
    pub wBlockTablePosHi:   USHORT,
    pub ArchiveSize64:      ULONGLONG,
    pub BetTablePos64:      ULONGLONG,
    pub HetTablePos64:      ULONGLONG,
    pub HashTableSize64:    ULONGLONG,
    pub BlockTableSize64:   ULONGLONG,
    pub HiBlockTableSize64: ULONGLONG,
    pub HetTableSize64:     ULONGLONG,
    pub BetTableSize64:     ULONGLONG,
    pub dwRawChunkSize:     DWORD,
    pub MD5_BlockTable:     [::std::os::raw::c_uchar; 16usize],
    pub MD5_HashTable:      [::std::os::raw::c_uchar; 16usize],
    pub MD5_HiBlockTable:   [::std::os::raw::c_uchar; 16usize],
    pub MD5_BetTable:       [::std::os::raw::c_uchar; 16usize],
    pub MD5_HetTable:       [::std::os::raw::c_uchar; 16usize],
    pub MD5_MpqHeader:      [::std::os::raw::c_uchar; 16usize],
}
#[test]
fn bindgen_test_layout__TMPQHeader() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQHeader>(),
        208usize,
        concat!("Size of: ", stringify!(_TMPQHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(_TMPQHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwHeaderSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwHeaderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwArchiveSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwArchiveSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).wFormatVersion as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(wFormatVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).wSectorSize as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(wSectorSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwHashTablePos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwHashTablePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwBlockTablePos as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwBlockTablePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwHashTableSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwHashTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwBlockTableSize as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwBlockTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).HiBlockTablePos64 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(HiBlockTablePos64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).wHashTablePosHi as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(wHashTablePosHi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).wBlockTablePosHi as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(wBlockTablePosHi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).ArchiveSize64 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(ArchiveSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).BetTablePos64 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(BetTablePos64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).HetTablePos64 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(HetTablePos64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).HashTableSize64 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(HashTableSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).BlockTableSize64 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(BlockTableSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).HiBlockTableSize64 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(HiBlockTableSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).HetTableSize64 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(HetTableSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).BetTableSize64 as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(BetTableSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwRawChunkSize as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwRawChunkSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_BlockTable as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_BlockTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_HashTable as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_HashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_HiBlockTable as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_HiBlockTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_BetTable as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_BetTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_HetTable as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_HetTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_MpqHeader as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_MpqHeader)
        )
    );
}
pub type TMPQHeader = _TMPQHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQHash {
    pub dwName1:      DWORD,
    pub dwName2:      DWORD,
    pub lcLocale:     USHORT,
    pub Platform:     BYTE,
    pub Reserved:     BYTE,
    pub dwBlockIndex: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQHash() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQHash>(),
        16usize,
        concat!("Size of: ", stringify!(_TMPQHash))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQHash>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQHash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).dwName1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(dwName1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).dwName2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(dwName2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).lcLocale as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(lcLocale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).Platform as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(Platform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).Reserved as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(Reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).dwBlockIndex as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(dwBlockIndex)
        )
    );
}
pub type TMPQHash = _TMPQHash;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQBlock {
    pub dwFilePos: DWORD,
    pub dwCSize:   DWORD,
    pub dwFSize:   DWORD,
    pub dwFlags:   DWORD,
}
#[test]
fn bindgen_test_layout__TMPQBlock() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQBlock>(),
        16usize,
        concat!("Size of: ", stringify!(_TMPQBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQBlock>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQBlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBlock>())).dwFilePos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBlock),
            "::",
            stringify!(dwFilePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBlock>())).dwCSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBlock),
            "::",
            stringify!(dwCSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBlock>())).dwFSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBlock),
            "::",
            stringify!(dwFSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBlock>())).dwFlags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBlock),
            "::",
            stringify!(dwFlags)
        )
    );
}
pub type TMPQBlock = _TMPQBlock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TPatchInfo {
    pub dwLength:   DWORD,
    pub dwFlags:    DWORD,
    pub dwDataSize: DWORD,
    pub md5:        [BYTE; 16usize],
}
#[test]
fn bindgen_test_layout__TPatchInfo() {
    assert_eq!(
        ::std::mem::size_of::<_TPatchInfo>(),
        28usize,
        concat!("Size of: ", stringify!(_TPatchInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_TPatchInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(_TPatchInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TPatchInfo>())).dwLength as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TPatchInfo),
            "::",
            stringify!(dwLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TPatchInfo>())).dwFlags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TPatchInfo),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TPatchInfo>())).dwDataSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TPatchInfo),
            "::",
            stringify!(dwDataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TPatchInfo>())).md5 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TPatchInfo),
            "::",
            stringify!(md5)
        )
    );
}
pub type TPatchInfo = _TPatchInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TFileEntry {
    pub FileNameHash: ULONGLONG,
    pub ByteOffset:   ULONGLONG,
    pub FileTime:     ULONGLONG,
    pub dwFileSize:   DWORD,
    pub dwCmpSize:    DWORD,
    pub dwFlags:      DWORD,
    pub dwCrc32:      DWORD,
    pub md5:          [BYTE; 16usize],
    pub szFileName:   *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__TFileEntry() {
    assert_eq!(
        ::std::mem::size_of::<_TFileEntry>(),
        64usize,
        concat!("Size of: ", stringify!(_TFileEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<_TFileEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(_TFileEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).FileNameHash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(FileNameHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).ByteOffset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(ByteOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).FileTime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(FileTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).dwFileSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(dwFileSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).dwCmpSize as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(dwCmpSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).dwFlags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).dwCrc32 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(dwCrc32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).md5 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(md5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).szFileName as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(szFileName)
        )
    );
}
pub type TFileEntry = _TFileEntry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQExtHeader {
    pub dwSignature: DWORD,
    pub dwVersion:   DWORD,
    pub dwDataSize:  DWORD,
}
#[test]
fn bindgen_test_layout__TMPQExtHeader() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQExtHeader>(),
        12usize,
        concat!("Size of: ", stringify!(_TMPQExtHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQExtHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQExtHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQExtHeader>())).dwSignature as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQExtHeader),
            "::",
            stringify!(dwSignature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQExtHeader>())).dwVersion as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQExtHeader),
            "::",
            stringify!(dwVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQExtHeader>())).dwDataSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQExtHeader),
            "::",
            stringify!(dwDataSize)
        )
    );
}
pub type TMPQExtHeader = _TMPQExtHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQHetHeader {
    pub ExtHdr:            TMPQExtHeader,
    pub dwTableSize:       DWORD,
    pub dwEntryCount:      DWORD,
    pub dwTotalCount:      DWORD,
    pub dwNameHashBitSize: DWORD,
    pub dwIndexSizeTotal:  DWORD,
    pub dwIndexSizeExtra:  DWORD,
    pub dwIndexSize:       DWORD,
    pub dwIndexTableSize:  DWORD,
}
#[test]
fn bindgen_test_layout__TMPQHetHeader() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQHetHeader>(),
        44usize,
        concat!("Size of: ", stringify!(_TMPQHetHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQHetHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQHetHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).ExtHdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(ExtHdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwTableSize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwEntryCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwEntryCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwTotalCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwTotalCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQHetHeader>())).dwNameHashBitSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwNameHashBitSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwIndexSizeTotal as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwIndexSizeTotal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwIndexSizeExtra as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwIndexSizeExtra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwIndexSize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwIndexSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwIndexTableSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwIndexTableSize)
        )
    );
}
pub type TMPQHetHeader = _TMPQHetHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQBetHeader {
    pub ExtHdr:               TMPQExtHeader,
    pub dwTableSize:          DWORD,
    pub dwEntryCount:         DWORD,
    pub dwUnknown08:          DWORD,
    pub dwTableEntrySize:     DWORD,
    pub dwBitIndex_FilePos:   DWORD,
    pub dwBitIndex_FileSize:  DWORD,
    pub dwBitIndex_CmpSize:   DWORD,
    pub dwBitIndex_FlagIndex: DWORD,
    pub dwBitIndex_Unknown:   DWORD,
    pub dwBitCount_FilePos:   DWORD,
    pub dwBitCount_FileSize:  DWORD,
    pub dwBitCount_CmpSize:   DWORD,
    pub dwBitCount_FlagIndex: DWORD,
    pub dwBitCount_Unknown:   DWORD,
    pub dwBitTotal_NameHash2: DWORD,
    pub dwBitExtra_NameHash2: DWORD,
    pub dwBitCount_NameHash2: DWORD,
    pub dwNameHashArraySize:  DWORD,
    pub dwFlagCount:          DWORD,
}
#[test]
fn bindgen_test_layout__TMPQBetHeader() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQBetHeader>(),
        88usize,
        concat!("Size of: ", stringify!(_TMPQBetHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQBetHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQBetHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).ExtHdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(ExtHdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).dwTableSize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).dwEntryCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwEntryCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).dwUnknown08 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwUnknown08)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).dwTableEntrySize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwTableEntrySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitIndex_FilePos as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitIndex_FilePos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitIndex_FileSize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitIndex_FileSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitIndex_CmpSize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitIndex_CmpSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitIndex_FlagIndex as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitIndex_FlagIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitIndex_Unknown as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitIndex_Unknown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_FilePos as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_FilePos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_FileSize as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_FileSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_CmpSize as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_CmpSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_FlagIndex as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_FlagIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_Unknown as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_Unknown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitTotal_NameHash2 as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitTotal_NameHash2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitExtra_NameHash2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitExtra_NameHash2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_NameHash2 as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_NameHash2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwNameHashArraySize as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwNameHashArraySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).dwFlagCount as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwFlagCount)
        )
    );
}
pub type TMPQBetHeader = _TMPQBetHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQHetTable {
    pub pBetIndexes:       *mut TBitArray,
    pub pNameHashes:       LPBYTE,
    pub AndMask64:         ULONGLONG,
    pub OrMask64:          ULONGLONG,
    pub dwEntryCount:      DWORD,
    pub dwTotalCount:      DWORD,
    pub dwNameHashBitSize: DWORD,
    pub dwIndexSizeTotal:  DWORD,
    pub dwIndexSizeExtra:  DWORD,
    pub dwIndexSize:       DWORD,
}
#[test]
fn bindgen_test_layout__TMPQHetTable() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQHetTable>(),
        56usize,
        concat!("Size of: ", stringify!(_TMPQHetTable))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQHetTable>(),
        8usize,
        concat!("Alignment of ", stringify!(_TMPQHetTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).pBetIndexes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(pBetIndexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).pNameHashes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(pNameHashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).AndMask64 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(AndMask64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).OrMask64 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(OrMask64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwEntryCount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwEntryCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwTotalCount as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwTotalCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwNameHashBitSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwNameHashBitSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwIndexSizeTotal as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwIndexSizeTotal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwIndexSizeExtra as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwIndexSizeExtra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwIndexSize as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwIndexSize)
        )
    );
}
pub type TMPQHetTable = _TMPQHetTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQBetTable {
    pub pNameHashes:          *mut TBitArray,
    pub pFileTable:           *mut TBitArray,
    pub pFileFlags:           LPDWORD,
    pub dwTableEntrySize:     DWORD,
    pub dwBitIndex_FilePos:   DWORD,
    pub dwBitIndex_FileSize:  DWORD,
    pub dwBitIndex_CmpSize:   DWORD,
    pub dwBitIndex_FlagIndex: DWORD,
    pub dwBitIndex_Unknown:   DWORD,
    pub dwBitCount_FilePos:   DWORD,
    pub dwBitCount_FileSize:  DWORD,
    pub dwBitCount_CmpSize:   DWORD,
    pub dwBitCount_FlagIndex: DWORD,
    pub dwBitCount_Unknown:   DWORD,
    pub dwBitTotal_NameHash2: DWORD,
    pub dwBitExtra_NameHash2: DWORD,
    pub dwBitCount_NameHash2: DWORD,
    pub dwEntryCount:         DWORD,
    pub dwFlagCount:          DWORD,
}
#[test]
fn bindgen_test_layout__TMPQBetTable() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQBetTable>(),
        88usize,
        concat!("Size of: ", stringify!(_TMPQBetTable))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQBetTable>(),
        8usize,
        concat!("Alignment of ", stringify!(_TMPQBetTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).pNameHashes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(pNameHashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).pFileTable as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(pFileTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).pFileFlags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(pFileFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).dwTableEntrySize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwTableEntrySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitIndex_FilePos as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitIndex_FilePos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitIndex_FileSize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitIndex_FileSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitIndex_CmpSize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitIndex_CmpSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitIndex_FlagIndex as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitIndex_FlagIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitIndex_Unknown as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitIndex_Unknown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_FilePos as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_FilePos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_FileSize as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_FileSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_CmpSize as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_CmpSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_FlagIndex as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_FlagIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_Unknown as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_Unknown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitTotal_NameHash2 as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitTotal_NameHash2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitExtra_NameHash2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitExtra_NameHash2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_NameHash2 as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_NameHash2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).dwEntryCount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwEntryCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).dwFlagCount as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwFlagCount)
        )
    );
}
pub type TMPQBetTable = _TMPQBetTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQNamePrefix {
    pub nLength:       usize,
    pub szPatchPrefix: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__TMPQNamePrefix() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQNamePrefix>(),
        16usize,
        concat!("Size of: ", stringify!(_TMPQNamePrefix))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQNamePrefix>(),
        8usize,
        concat!("Alignment of ", stringify!(_TMPQNamePrefix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNamePrefix>())).nLength as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNamePrefix),
            "::",
            stringify!(nLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNamePrefix>())).szPatchPrefix as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNamePrefix),
            "::",
            stringify!(szPatchPrefix)
        )
    );
}
pub type TMPQNamePrefix = _TMPQNamePrefix;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQNameCache {
    pub FirstNameOffset: DWORD,
    pub FreeSpaceOffset: DWORD,
    pub TotalCacheSize:  DWORD,
    pub SearchOffset:    DWORD,
}
#[test]
fn bindgen_test_layout__TMPQNameCache() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQNameCache>(),
        16usize,
        concat!("Size of: ", stringify!(_TMPQNameCache))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQNameCache>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQNameCache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNameCache>())).FirstNameOffset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNameCache),
            "::",
            stringify!(FirstNameOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNameCache>())).FreeSpaceOffset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNameCache),
            "::",
            stringify!(FreeSpaceOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNameCache>())).TotalCacheSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNameCache),
            "::",
            stringify!(TotalCacheSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNameCache>())).SearchOffset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNameCache),
            "::",
            stringify!(SearchOffset)
        )
    );
}
pub type TMPQNameCache = _TMPQNameCache;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TMPQArchive {
    pub pStream:               *mut TFileStream,
    pub UserDataPos:           ULONGLONG,
    pub MpqPos:                ULONGLONG,
    pub FileSize:              ULONGLONG,
    pub haPatch:               *mut _TMPQArchive,
    pub haBase:                *mut _TMPQArchive,
    pub pPatchPrefix:          *mut TMPQNamePrefix,
    pub pUserData:             *mut TMPQUserData,
    pub pHeader:               *mut TMPQHeader,
    pub pHashTable:            *mut TMPQHash,
    pub pHetTable:             *mut TMPQHetTable,
    pub pFileTable:            *mut TFileEntry,
    pub pfnHashString:         HASH_STRING,
    pub UserData:              TMPQUserData,
    pub HeaderData:            [DWORD; 52usize],
    pub dwHETBlockSize:        DWORD,
    pub dwBETBlockSize:        DWORD,
    pub dwMaxFileCount:        DWORD,
    pub dwFileTableSize:       DWORD,
    pub dwReservedFiles:       DWORD,
    pub dwSectorSize:          DWORD,
    pub dwFileFlags1:          DWORD,
    pub dwFileFlags2:          DWORD,
    pub dwFileFlags3:          DWORD,
    pub dwAttrFlags:           DWORD,
    pub dwFlags:               DWORD,
    pub dwSubType:             DWORD,
    pub pfnAddFileCB:          SFILE_ADDFILE_CALLBACK,
    pub pvAddFileUserData:     *mut ::std::os::raw::c_void,
    pub pfnCompactCB:          SFILE_COMPACT_CALLBACK,
    pub CompactBytesProcessed: ULONGLONG,
    pub CompactTotalBytes:     ULONGLONG,
    pub pvCompactUserData:     *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__TMPQArchive() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQArchive>(),
        424usize,
        concat!("Size of: ", stringify!(_TMPQArchive))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQArchive>(),
        8usize,
        concat!("Alignment of ", stringify!(_TMPQArchive))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pStream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pStream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).UserDataPos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(UserDataPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).MpqPos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(MpqPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).FileSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(FileSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).haPatch as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(haPatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).haBase as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(haBase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pPatchPrefix as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pPatchPrefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pUserData as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pHeader as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pHeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pHashTable as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pHashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pHetTable as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pHetTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pFileTable as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pFileTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pfnHashString as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pfnHashString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).UserData as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).HeaderData as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(HeaderData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwHETBlockSize as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwHETBlockSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwBETBlockSize as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwBETBlockSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwMaxFileCount as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwMaxFileCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwFileTableSize as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwFileTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwReservedFiles as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwReservedFiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwSectorSize as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwSectorSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwFileFlags1 as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwFileFlags1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwFileFlags2 as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwFileFlags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwFileFlags3 as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwFileFlags3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwAttrFlags as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwAttrFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwFlags as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwSubType as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwSubType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pfnAddFileCB as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pfnAddFileCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pvAddFileUserData as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pvAddFileUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pfnCompactCB as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pfnCompactCB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQArchive>())).CompactBytesProcessed as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(CompactBytesProcessed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).CompactTotalBytes as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(CompactTotalBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pvCompactUserData as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pvCompactUserData)
        )
    );
}
pub type TMPQArchive = _TMPQArchive;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TMPQFile {
    pub pStream:           *mut TFileStream,
    pub ha:                *mut TMPQArchive,
    pub pHashEntry:        *mut TMPQHash,
    pub pFileEntry:        *mut TFileEntry,
    pub RawFilePos:        ULONGLONG,
    pub MpqFilePos:        ULONGLONG,
    pub dwHashIndex:       DWORD,
    pub dwFileKey:         DWORD,
    pub dwFilePos:         DWORD,
    pub dwMagic:           DWORD,
    pub hfPatch:           *mut _TMPQFile,
    pub pPatchInfo:        *mut TPatchInfo,
    pub SectorOffsets:     LPDWORD,
    pub SectorChksums:     LPDWORD,
    pub pbFileData:        LPBYTE,
    pub cbFileData:        DWORD,
    pub dwCompression0:    DWORD,
    pub dwSectorCount:     DWORD,
    pub dwPatchedFileSize: DWORD,
    pub dwDataSize:        DWORD,
    pub pbFileSector:      LPBYTE,
    pub dwSectorOffs:      DWORD,
    pub dwSectorSize:      DWORD,
    pub hctx:              [::std::os::raw::c_uchar; 96usize],
    pub dwCrc32:           DWORD,
    pub nAddFileError:     ::std::os::raw::c_int,
    pub bLoadedSectorCRCs: bool,
    pub bCheckSectorCRCs:  bool,
    pub bIsWriteHandle:    bool,
}
#[test]
fn bindgen_test_layout__TMPQFile() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQFile>(),
        256usize,
        concat!("Size of: ", stringify!(_TMPQFile))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQFile>(),
        8usize,
        concat!("Alignment of ", stringify!(_TMPQFile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pStream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pStream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).ha as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(ha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pHashEntry as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pHashEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pFileEntry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pFileEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).RawFilePos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(RawFilePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).MpqFilePos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(MpqFilePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwHashIndex as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwHashIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwFileKey as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwFileKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwFilePos as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwFilePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwMagic as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwMagic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).hfPatch as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(hfPatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pPatchInfo as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pPatchInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).SectorOffsets as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(SectorOffsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).SectorChksums as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(SectorChksums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pbFileData as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pbFileData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).cbFileData as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(cbFileData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwCompression0 as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwCompression0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwSectorCount as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwSectorCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwPatchedFileSize as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwPatchedFileSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwDataSize as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwDataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pbFileSector as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pbFileSector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwSectorOffs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwSectorOffs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwSectorSize as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwSectorSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).hctx as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(hctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwCrc32 as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwCrc32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).nAddFileError as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(nAddFileError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).bLoadedSectorCRCs as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(bLoadedSectorCRCs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).bCheckSectorCRCs as *const _ as usize },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(bCheckSectorCRCs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).bIsWriteHandle as *const _ as usize },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(bIsWriteHandle)
        )
    );
}
pub type TMPQFile = _TMPQFile;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SFILE_FIND_DATA {
    pub cFileName:    [::std::os::raw::c_char; 1024usize],
    pub szPlainName:  *mut ::std::os::raw::c_char,
    pub dwHashIndex:  DWORD,
    pub dwBlockIndex: DWORD,
    pub dwFileSize:   DWORD,
    pub dwFileFlags:  DWORD,
    pub dwCompSize:   DWORD,
    pub dwFileTimeLo: DWORD,
    pub dwFileTimeHi: DWORD,
    pub lcLocale:     LCID,
}
#[test]
fn bindgen_test_layout__SFILE_FIND_DATA() {
    assert_eq!(
        ::std::mem::size_of::<_SFILE_FIND_DATA>(),
        1064usize,
        concat!("Size of: ", stringify!(_SFILE_FIND_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_SFILE_FIND_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_SFILE_FIND_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).cFileName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(cFileName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).szPlainName as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(szPlainName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwHashIndex as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwHashIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwBlockIndex as *const _ as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwBlockIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwFileSize as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwFileSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwFileFlags as *const _ as usize },
        1044usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwFileFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwCompSize as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwCompSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwFileTimeLo as *const _ as usize },
        1052usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwFileTimeLo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwFileTimeHi as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwFileTimeHi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).lcLocale as *const _ as usize },
        1060usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(lcLocale)
        )
    );
}
pub type SFILE_FIND_DATA = _SFILE_FIND_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SFILE_CREATE_MPQ {
    pub cbSize:         DWORD,
    pub dwMpqVersion:   DWORD,
    pub pvUserData:     *mut ::std::os::raw::c_void,
    pub cbUserData:     DWORD,
    pub dwStreamFlags:  DWORD,
    pub dwFileFlags1:   DWORD,
    pub dwFileFlags2:   DWORD,
    pub dwFileFlags3:   DWORD,
    pub dwAttrFlags:    DWORD,
    pub dwSectorSize:   DWORD,
    pub dwRawChunkSize: DWORD,
    pub dwMaxFileCount: DWORD,
}
#[test]
fn bindgen_test_layout__SFILE_CREATE_MPQ() {
    assert_eq!(
        ::std::mem::size_of::<_SFILE_CREATE_MPQ>(),
        56usize,
        concat!("Size of: ", stringify!(_SFILE_CREATE_MPQ))
    );
    assert_eq!(
        ::std::mem::align_of::<_SFILE_CREATE_MPQ>(),
        8usize,
        concat!("Alignment of ", stringify!(_SFILE_CREATE_MPQ))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).cbSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwMpqVersion as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwMpqVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).pvUserData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(pvUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).cbUserData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(cbUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwStreamFlags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwStreamFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwFileFlags1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwFileFlags1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwFileFlags2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwFileFlags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwFileFlags3 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwFileFlags3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwAttrFlags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwAttrFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwSectorSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwSectorSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwRawChunkSize as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwRawChunkSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwMaxFileCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwMaxFileCount)
        )
    );
}
pub type PSFILE_CREATE_MPQ = *mut _SFILE_CREATE_MPQ;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TStreamBitmap {
    pub StreamSize: ULONGLONG,
    pub BitmapSize: DWORD,
    pub BlockCount: DWORD,
    pub BlockSize:  DWORD,
    pub IsComplete: DWORD,
}
#[test]
fn bindgen_test_layout__TStreamBitmap() {
    assert_eq!(
        ::std::mem::size_of::<_TStreamBitmap>(),
        24usize,
        concat!("Size of: ", stringify!(_TStreamBitmap))
    );
    assert_eq!(
        ::std::mem::align_of::<_TStreamBitmap>(),
        8usize,
        concat!("Alignment of ", stringify!(_TStreamBitmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TStreamBitmap>())).StreamSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TStreamBitmap),
            "::",
            stringify!(StreamSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TStreamBitmap>())).BitmapSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TStreamBitmap),
            "::",
            stringify!(BitmapSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TStreamBitmap>())).BlockCount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TStreamBitmap),
            "::",
            stringify!(BlockCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TStreamBitmap>())).BlockSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TStreamBitmap),
            "::",
            stringify!(BlockSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TStreamBitmap>())).IsComplete as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_TStreamBitmap),
            "::",
            stringify!(IsComplete)
        )
    );
}
pub type TStreamBitmap = _TStreamBitmap;
extern "C" {
    pub fn SFileGetLocale() -> LCID;
}
extern "C" {
    pub fn SFileSetLocale(lcNewLocale: LCID) -> LCID;
}
extern "C" {
    pub fn SFileOpenArchive(
        szMpqName: *const TCHAR,
        dwPriority: DWORD,
        dwFlags: DWORD,
        phMpq: *mut HANDLE,
    ) -> bool;
}
extern "C" {
    pub fn SFileCreateArchive(
        szMpqName: *const TCHAR,
        dwCreateFlags: DWORD,
        dwMaxFileCount: DWORD,
        phMpq: *mut HANDLE,
    ) -> bool;
}
extern "C" {
    pub fn SFileCreateArchive2(
        szMpqName: *const TCHAR,
        pCreateInfo: PSFILE_CREATE_MPQ,
        phMpq: *mut HANDLE,
    ) -> bool;
}
extern "C" {
    pub fn SFileSetDownloadCallback(
        hMpq: HANDLE,
        DownloadCB: SFILE_DOWNLOAD_CALLBACK,
        pvUserData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn SFileFlushArchive(hMpq: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileCloseArchive(hMpq: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileAddListFile(hMpq: HANDLE, szListFile: *const TCHAR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SFileSetCompactCallback(
        hMpq: HANDLE,
        CompactCB: SFILE_COMPACT_CALLBACK,
        pvUserData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn SFileCompactArchive(hMpq: HANDLE, szListFile: *const TCHAR, bReserved: bool) -> bool;
}
extern "C" {
    pub fn SFileGetMaxFileCount(hMpq: HANDLE) -> DWORD;
}
extern "C" {
    pub fn SFileSetMaxFileCount(hMpq: HANDLE, dwMaxFileCount: DWORD) -> bool;
}
extern "C" {
    pub fn SFileGetAttributes(hMpq: HANDLE) -> DWORD;
}
extern "C" {
    pub fn SFileSetAttributes(hMpq: HANDLE, dwFlags: DWORD) -> bool;
}
extern "C" {
    pub fn SFileUpdateFileAttributes(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn SFileOpenPatchArchive(
        hMpq: HANDLE,
        szPatchMpqName: *const TCHAR,
        szPatchPathPrefix: *const ::std::os::raw::c_char,
        dwFlags: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileIsPatchedArchive(hMpq: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileHasFile(hMpq: HANDLE, szFileName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn SFileOpenFileEx(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        dwSearchScope: DWORD,
        phFile: *mut HANDLE,
    ) -> bool;
}
extern "C" {
    pub fn SFileGetFileSize(hFile: HANDLE, pdwFileSizeHigh: LPDWORD) -> DWORD;
}
extern "C" {
    pub fn SFileSetFilePointer(
        hFile: HANDLE,
        lFilePos: LONG,
        plFilePosHigh: *mut LONG,
        dwMoveMethod: DWORD,
    ) -> DWORD;
}
extern "C" {
    pub fn SFileReadFile(
        hFile: HANDLE,
        lpBuffer: *mut ::std::os::raw::c_void,
        dwToRead: DWORD,
        pdwRead: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> bool;
}
extern "C" {
    pub fn SFileCloseFile(hFile: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileGetFileInfo(
        hMpqOrFile: HANDLE,
        InfoClass: SFileInfoClass,
        pvFileInfo: *mut ::std::os::raw::c_void,
        cbFileInfo: DWORD,
        pcbLengthNeeded: LPDWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileGetFileName(hFile: HANDLE, szFileName: *mut ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn SFileFreeFileInfo(
        pvFileInfo: *mut ::std::os::raw::c_void,
        InfoClass: SFileInfoClass,
    ) -> bool;
}
extern "C" {
    pub fn SFileExtractFile(
        hMpq: HANDLE,
        szToExtract: *const ::std::os::raw::c_char,
        szExtracted: *const TCHAR,
        dwSearchScope: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileGetFileChecksums(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        pdwCrc32: LPDWORD,
        pMD5: *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn SFileVerifyFile(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        dwFlags: DWORD,
    ) -> DWORD;
}
extern "C" {
    pub fn SFileVerifyRawData(
        hMpq: HANDLE,
        dwWhatToVerify: DWORD,
        szFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SFileSignArchive(hMpq: HANDLE, dwSignatureType: DWORD) -> bool;
}
extern "C" {
    pub fn SFileVerifyArchive(hMpq: HANDLE) -> DWORD;
}
extern "C" {
    pub fn SFileFindFirstFile(
        hMpq: HANDLE,
        szMask: *const ::std::os::raw::c_char,
        lpFindFileData: *mut SFILE_FIND_DATA,
        szListFile: *const TCHAR,
    ) -> HANDLE;
}
extern "C" {
    pub fn SFileFindNextFile(hFind: HANDLE, lpFindFileData: *mut SFILE_FIND_DATA) -> bool;
}
extern "C" {
    pub fn SFileFindClose(hFind: HANDLE) -> bool;
}
extern "C" {
    pub fn SListFileFindFirstFile(
        hMpq: HANDLE,
        szListFile: *const TCHAR,
        szMask: *const ::std::os::raw::c_char,
        lpFindFileData: *mut SFILE_FIND_DATA,
    ) -> HANDLE;
}
extern "C" {
    pub fn SListFileFindNextFile(hFind: HANDLE, lpFindFileData: *mut SFILE_FIND_DATA) -> bool;
}
extern "C" {
    pub fn SListFileFindClose(hFind: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileEnumLocales(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        plcLocales: *mut LCID,
        pdwMaxLocales: LPDWORD,
        dwSearchScope: DWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SFileCreateFile(
        hMpq: HANDLE,
        szArchivedName: *const ::std::os::raw::c_char,
        FileTime: ULONGLONG,
        dwFileSize: DWORD,
        lcLocale: LCID,
        dwFlags: DWORD,
        phFile: *mut HANDLE,
    ) -> bool;
}
extern "C" {
    pub fn SFileWriteFile(
        hFile: HANDLE,
        pvData: *const ::std::os::raw::c_void,
        dwSize: DWORD,
        dwCompression: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileFinishFile(hFile: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileAddFileEx(
        hMpq: HANDLE,
        szFileName: *const TCHAR,
        szArchivedName: *const ::std::os::raw::c_char,
        dwFlags: DWORD,
        dwCompression: DWORD,
        dwCompressionNext: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileAddFile(
        hMpq: HANDLE,
        szFileName: *const TCHAR,
        szArchivedName: *const ::std::os::raw::c_char,
        dwFlags: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileAddWave(
        hMpq: HANDLE,
        szFileName: *const TCHAR,
        szArchivedName: *const ::std::os::raw::c_char,
        dwFlags: DWORD,
        dwQuality: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileRemoveFile(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        dwSearchScope: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileRenameFile(
        hMpq: HANDLE,
        szOldFileName: *const ::std::os::raw::c_char,
        szNewFileName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn SFileSetFileLocale(hFile: HANDLE, lcNewLocale: LCID) -> bool;
}
extern "C" {
    pub fn SFileSetDataCompression(DataCompression: DWORD) -> bool;
}
extern "C" {
    pub fn SFileSetAddFileCallback(
        hMpq: HANDLE,
        AddFileCB: SFILE_ADDFILE_CALLBACK,
        pvUserData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn GetLastError() -> DWORD;
}
